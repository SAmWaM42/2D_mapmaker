#ifndef mapmaker
#define mapmaker
#include <iostream>
#include <fstream>
#include "raylib.h"


#include "maploader.hpp"
#include "charachters.c++"
#include  "json.hpp"
#include <iostream>
#include <map>
using namespace std;
#define screenheight 720
#define screenwidth 960
#define RENDER_SCALE 2.0

class tileeditor
{

public:
    void run_editor()
    {

        bool loaded = false;
        int zoom = 1;
        int rotation = 0;
        Vector2 offset = {screenwidth / 2, screenheight / 2};
        Vector2 target = {screenwidth / 2, screenheight / 2};
        mod_cam camera(target, offset, zoom, rotation);

        InitWindow(screenwidth, screenheight, "indigoV2");
        map<string, map<int, Texture2D>> textures;
        textures["grass"][0] = LoadTexture("assets/floor.png");
        textures["grass"][1] = LoadTexture("assets/moss.png");
        textures["sand"][0] = LoadTexture("assets/sand.png");
        textures["sand"][1] = LoadTexture("assets/bronze.png");

        string tile_name[textures.size()];
        tile_name[0] = "grass";
        tile_name[1] = "sand";

        tile tile_set[1000];
        for (int i = 0; i < sizeof(tile_set) / sizeof(tile); i++)
        {
            tile_set[i].used = false;
        }

        Texture2D current_tile_img;
        int current_image = 0;
        int current_tile = 0;
        int variant = 0;
        bool shift = false;

        SetTargetFPS(60);
        while (!WindowShouldClose())
        {

            current_tile_img = textures[tile_name[current_image]][variant];

            tile_set[current_tile].look = current_tile_img;

            camera.move_cam();

            tile_set[current_tile].placement.x = GetMouseX();
            tile_set[current_tile].placement.y = GetMouseY();

            if (IsMouseButtonDown(MOUSE_BUTTON_RIGHT))
            {
                tile_set[current_tile].used = true;
                current_tile = (current_tile + 1) % (sizeof(tile_set) / sizeof(tile));
            }
           
            if (IsMouseButtonDown(MOUSE_BUTTON_RIGHT) && shift)
            {
                for (int i = 0; i < sizeof(tile_set) / sizeof(tile); i++)
                {
                    if(tile_set[i].used)
                  {  if(CheckCollisionPointRec(GetMousePosition(),tile_set[i].placement))
                    {
                         tile_set[current_tile].used = false;
                         
                    }
                  }
                }
            }
            if (IsKeyPressed(KEY_RIGHT_SHIFT))
            {
                shift = !shift;
            }

            if (IsKeyPressed(KEY_N))
            {
                current_image = (current_image + 1) % textures.size();
            }
            if (IsKeyPressed(KEY_N) && shift)
            {
                variant = (variant + 1) % textures[tile_name[current_tile]].size();
            }
            if(IsKeyPressed(KEY_O))
            {
                
               fstream maps;
               maps.open("map.json",ios::out);
             if(!maps)
             {
                cout<<"error opening file";
             }
              nlohmann::json j;
              for(int i=0;i<max_tiles;i++)
            {  j.parse()
            }

            }
            cout << shift;

            BeginDrawing();
            ClearBackground(BLUE);
            BeginMode2D(camera.camera);

            DrawTexture(textures[tile_name[current_image]][variant], (0 + camera.camera.offset.x), 0, RAYWHITE);

            DrawTexture(tile_set[current_tile].look, tile_set[current_tile].placement.x, tile_set[current_tile].placement.y, RAYWHITE);

            for (int i = 0; i < sizeof(tile_set) / sizeof(tile); i++)
            {
                if (tile_set[i].used == true)
                {
                    DrawTexture(tile_set[i].look, tile_set[i].placement.x, tile_set[i].placement.y, RAYWHITE);
                }
            }

            EndMode2D();
            EndDrawing();
        }
        CloseWindow();
    }
};

int main()
{

    tileeditor editor;

    editor.run_editor();
}

 for (int i = 0; i < max_tiles; i++)
        {

            tiles[i].placement.height = tile_size;
            tiles[i].placement.width = tile_size;
        }

        for (int i = 0; i < maps.height / 2; i++)
        {
            for (int j = 0; j < maps.width / 2; j++)
            {
                Color color = GetImageColor(maps, j * 2, i * 2);
                if (color.g == 0)
                {

                    tilenumber++;

                    tiles[tilenumber].placement = {.x = tiles[tilenumber].placement.width * j, .y = tiles[tilenumber].placement.height * i, .width = tile_size, .height = tile_size};
                    tiles[tilenumber].used = true;
                    tiles[tilenumber].type = "grass";
                 
                    if (color.r > 0)
                    {
                        tiles[tilenumber].type = "sand";
                            
                    }
                }
                  tiles[tilenumber].look=texture[tiles[tilenumber].type];
            }
        }


#endif


fix the file creation and loading soon